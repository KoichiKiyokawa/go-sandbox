// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
)

const changeBalance = `-- name: ChangeBalance :one
update users set balance = balance + ?1 where id = ?2 returning id, name, email, balance, created_at, updated_at
`

type ChangeBalanceParams struct {
	Amount int64
	ID     string
}

func (q *Queries) ChangeBalance(ctx context.Context, arg ChangeBalanceParams) (User, error) {
	row := q.db.QueryRowContext(ctx, changeBalance, arg.Amount, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
insert into users (name, email) values (?1, ?2) returning id, name, email, balance, created_at, updated_at
`

type CreateUserParams struct {
	Name  string
	Email string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, name, email, balance, created_at, updated_at from users where id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserList = `-- name: GetUserList :many
select id, name, email, balance, created_at, updated_at from users limit ?2 offset ?1
`

type GetUserListParams struct {
	Offset int64
	Limit  int64
}

func (q *Queries) GetUserList(ctx context.Context, arg GetUserListParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUserList, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
