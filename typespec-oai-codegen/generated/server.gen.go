// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// User defines model for User.
type User struct {
	Email string `json:"email"`
	Id    string `json:"id"`
	Name  string `json:"name"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1/users)
	UserServiceList(ctx echo.Context) error

	// (GET /api/v1/users/{id})
	UserServiceRead(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UserServiceList converts echo context to params.
func (w *ServerInterfaceWrapper) UserServiceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserServiceList(ctx)
	return err
}

// UserServiceRead converts echo context to params.
func (w *ServerInterfaceWrapper) UserServiceRead(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserServiceRead(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/users", wrapper.UserServiceList)
	router.GET(baseURL+"/api/v1/users/:id", wrapper.UserServiceRead)

}

type UserServiceListRequestObject struct {
}

type UserServiceListResponseObject interface {
	VisitUserServiceListResponse(w http.ResponseWriter) error
}

type UserServiceList200JSONResponse []User

func (response UserServiceList200JSONResponse) VisitUserServiceListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserServiceListdefaultJSONResponse struct {
	Body       InternalServerError
	StatusCode int
}

func (response UserServiceListdefaultJSONResponse) VisitUserServiceListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UserServiceReadRequestObject struct {
	Id string `json:"id"`
}

type UserServiceReadResponseObject interface {
	VisitUserServiceReadResponse(w http.ResponseWriter) error
}

type UserServiceRead200JSONResponse User

func (response UserServiceRead200JSONResponse) VisitUserServiceReadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserServiceReaddefaultJSONResponse struct {
	Body struct {
		union json.RawMessage
	}
	StatusCode int
}

func (response UserServiceReaddefaultJSONResponse) VisitUserServiceReadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body.union)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /api/v1/users)
	UserServiceList(ctx context.Context, request UserServiceListRequestObject) (UserServiceListResponseObject, error)

	// (GET /api/v1/users/{id})
	UserServiceRead(ctx context.Context, request UserServiceReadRequestObject) (UserServiceReadResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// UserServiceList operation middleware
func (sh *strictHandler) UserServiceList(ctx echo.Context) error {
	var request UserServiceListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserServiceList(ctx.Request().Context(), request.(UserServiceListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserServiceList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserServiceListResponseObject); ok {
		return validResponse.VisitUserServiceListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserServiceRead operation middleware
func (sh *strictHandler) UserServiceRead(ctx echo.Context, id string) error {
	var request UserServiceReadRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserServiceRead(ctx.Request().Context(), request.(UserServiceReadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserServiceRead")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserServiceReadResponseObject); ok {
		return validResponse.VisitUserServiceReadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xUwW7UMBD9lWjgGDahveXGAaRKCCRaTtUejP12d6qNbcaTFatV/h3Z2e1SiEopEkKK",
	"ZGc8M37z3ksOZEMfg4fXRN2Bkt2gN2V75RXizfYasoO8FQmSw1FChCijJNngkNdVkN4odcReLy+oJt1H",
	"TK9YQ2isqUdKZl2yj4dJhf2axrEmwdeBBY6626nnOX953yx8uYPV3OtD0Hdh8O7/QvU5YQYMesPbmf41",
	"sZsNe9M/AQ87OqbWxyt+hZRr2K9C6ca6zWc3+4jrCFtFMVbZ5vodJHHw1FHbtu2r8mQkIcKbyNTR5aJd",
	"tFRTNLopUzUmcrN73QwJUgJraF7y5EY5+CtHXWEk+4ct3nNSyiOkGHyaqLlo20kur/Cl3MS4ZVsaNHcp",
	"Qzp5Mu9Y0ZfCl4IVdfSiObu3OVq3KSqM91wYEbOfqHBIVjjqNOrNBlUmFEmrjUlVGqwFHNyCSu7KDFv9",
	"I3iPoZr7mmZAvfHV4PEtwipchZxWnShb5IKxfkh9c2A3PoX/TzCuCCimhxbRbg/E+dIs6slM3WSss9NU",
	"BtQ/DPmzK5d/qenvpfwX0hm//7gqjDyG5+FvZ6yfIfnyWaKP4/cAAAD//79d5OupBQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
