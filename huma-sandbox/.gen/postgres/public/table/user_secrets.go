//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserSecrets = newUserSecretsTable("public", "user_secrets", "")

type userSecretsTable struct {
	postgres.Table

	// Columns
	UserID       postgres.ColumnString
	PasswordHash postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserSecretsTable struct {
	userSecretsTable

	EXCLUDED userSecretsTable
}

// AS creates new UserSecretsTable with assigned alias
func (a UserSecretsTable) AS(alias string) *UserSecretsTable {
	return newUserSecretsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserSecretsTable with assigned schema name
func (a UserSecretsTable) FromSchema(schemaName string) *UserSecretsTable {
	return newUserSecretsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserSecretsTable with assigned table prefix
func (a UserSecretsTable) WithPrefix(prefix string) *UserSecretsTable {
	return newUserSecretsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserSecretsTable with assigned table suffix
func (a UserSecretsTable) WithSuffix(suffix string) *UserSecretsTable {
	return newUserSecretsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserSecretsTable(schemaName, tableName, alias string) *UserSecretsTable {
	return &UserSecretsTable{
		userSecretsTable: newUserSecretsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newUserSecretsTableImpl("", "excluded", ""),
	}
}

func newUserSecretsTableImpl(schemaName, tableName, alias string) userSecretsTable {
	var (
		UserIDColumn       = postgres.StringColumn("user_id")
		PasswordHashColumn = postgres.StringColumn("password_hash")
		allColumns         = postgres.ColumnList{UserIDColumn, PasswordHashColumn}
		mutableColumns     = postgres.ColumnList{UserIDColumn, PasswordHashColumn}
	)

	return userSecretsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:       UserIDColumn,
		PasswordHash: PasswordHashColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
