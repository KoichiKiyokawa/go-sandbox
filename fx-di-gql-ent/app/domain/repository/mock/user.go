// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"fx-di/app/domain/repository"
	"fx-di/ent"
	"sync"
)

// Ensure, that UserRepositoryMock does implement repository.UserRepository.
// If this is not the case, regenerate this file with moq.
var _ repository.UserRepository = &UserRepositoryMock{}

// UserRepositoryMock is a mock implementation of repository.UserRepository.
//
//	func TestSomethingThatUsesUserRepository(t *testing.T) {
//
//		// make and configure a mocked repository.UserRepository
//		mockedUserRepository := &UserRepositoryMock{
//			FindAllFunc: func(ctx context.Context) ([]*ent.User, error) {
//				panic("mock out the FindAll method")
//			},
//			FindOneFunc: func(ctx context.Context, id int) (*ent.User, error) {
//				panic("mock out the FindOne method")
//			},
//		}
//
//		// use mockedUserRepository in code that requires repository.UserRepository
//		// and then make assertions.
//
//	}
type UserRepositoryMock struct {
	// FindAllFunc mocks the FindAll method.
	FindAllFunc func(ctx context.Context) ([]*ent.User, error)

	// FindOneFunc mocks the FindOne method.
	FindOneFunc func(ctx context.Context, id int) (*ent.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindAll holds details about calls to the FindAll method.
		FindAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// FindOne holds details about calls to the FindOne method.
		FindOne []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
	}
	lockFindAll sync.RWMutex
	lockFindOne sync.RWMutex
}

// FindAll calls FindAllFunc.
func (mock *UserRepositoryMock) FindAll(ctx context.Context) ([]*ent.User, error) {
	if mock.FindAllFunc == nil {
		panic("UserRepositoryMock.FindAllFunc: method is nil but UserRepository.FindAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockFindAll.Lock()
	mock.calls.FindAll = append(mock.calls.FindAll, callInfo)
	mock.lockFindAll.Unlock()
	return mock.FindAllFunc(ctx)
}

// FindAllCalls gets all the calls that were made to FindAll.
// Check the length with:
//
//	len(mockedUserRepository.FindAllCalls())
func (mock *UserRepositoryMock) FindAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockFindAll.RLock()
	calls = mock.calls.FindAll
	mock.lockFindAll.RUnlock()
	return calls
}

// FindOne calls FindOneFunc.
func (mock *UserRepositoryMock) FindOne(ctx context.Context, id int) (*ent.User, error) {
	if mock.FindOneFunc == nil {
		panic("UserRepositoryMock.FindOneFunc: method is nil but UserRepository.FindOne was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindOne.Lock()
	mock.calls.FindOne = append(mock.calls.FindOne, callInfo)
	mock.lockFindOne.Unlock()
	return mock.FindOneFunc(ctx, id)
}

// FindOneCalls gets all the calls that were made to FindOne.
// Check the length with:
//
//	len(mockedUserRepository.FindOneCalls())
func (mock *UserRepositoryMock) FindOneCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockFindOne.RLock()
	calls = mock.calls.FindOne
	mock.lockFindOne.RUnlock()
	return calls
}
