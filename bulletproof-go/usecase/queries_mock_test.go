// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecase

import (
	"bulletproof-go/gen/queries"
	"context"
	"sync"
)

// Ensure, that QuerierMock does implement queries.Querier.
// If this is not the case, regenerate this file with moq.
var _ queries.Querier = &QuerierMock{}

// QuerierMock is a mock implementation of queries.Querier.
//
//	func TestSomethingThatUsesQuerier(t *testing.T) {
//
//		// make and configure a mocked queries.Querier
//		mockedQuerier := &QuerierMock{
//			CreateUserFunc: func(ctx context.Context, arg queries.CreateUserParams) (queries.User, error) {
//				panic("mock out the CreateUser method")
//			},
//			GetUserFunc: func(ctx context.Context, id string) (queries.User, error) {
//				panic("mock out the GetUser method")
//			},
//			GetUsersFunc: func(ctx context.Context) ([]queries.User, error) {
//				panic("mock out the GetUsers method")
//			},
//		}
//
//		// use mockedQuerier in code that requires queries.Querier
//		// and then make assertions.
//
//	}
type QuerierMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, arg queries.CreateUserParams) (queries.User, error)

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(ctx context.Context, id string) (queries.User, error)

	// GetUsersFunc mocks the GetUsers method.
	GetUsersFunc func(ctx context.Context) ([]queries.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg queries.CreateUserParams
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetUsers holds details about calls to the GetUsers method.
		GetUsers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockCreateUser sync.RWMutex
	lockGetUser    sync.RWMutex
	lockGetUsers   sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *QuerierMock) CreateUser(ctx context.Context, arg queries.CreateUserParams) (queries.User, error) {
	if mock.CreateUserFunc == nil {
		panic("QuerierMock.CreateUserFunc: method is nil but Querier.CreateUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg queries.CreateUserParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, arg)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedQuerier.CreateUserCalls())
func (mock *QuerierMock) CreateUserCalls() []struct {
	Ctx context.Context
	Arg queries.CreateUserParams
} {
	var calls []struct {
		Ctx context.Context
		Arg queries.CreateUserParams
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *QuerierMock) GetUser(ctx context.Context, id string) (queries.User, error) {
	if mock.GetUserFunc == nil {
		panic("QuerierMock.GetUserFunc: method is nil but Querier.GetUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(ctx, id)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//
//	len(mockedQuerier.GetUserCalls())
func (mock *QuerierMock) GetUserCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// GetUsers calls GetUsersFunc.
func (mock *QuerierMock) GetUsers(ctx context.Context) ([]queries.User, error) {
	if mock.GetUsersFunc == nil {
		panic("QuerierMock.GetUsersFunc: method is nil but Querier.GetUsers was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetUsers.Lock()
	mock.calls.GetUsers = append(mock.calls.GetUsers, callInfo)
	mock.lockGetUsers.Unlock()
	return mock.GetUsersFunc(ctx)
}

// GetUsersCalls gets all the calls that were made to GetUsers.
// Check the length with:
//
//	len(mockedQuerier.GetUsersCalls())
func (mock *QuerierMock) GetUsersCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetUsers.RLock()
	calls = mock.calls.GetUsers
	mock.lockGetUsers.RUnlock()
	return calls
}
